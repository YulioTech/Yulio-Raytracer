// ======================================================================== //
// Copyright 2009-2013 Intel Corporation                                    //
//                                                                          //
// Licensed under the Apache License, Version 2.0 (the "License");          //
// you may not use this file except in compliance with the License.         //
// You may obtain a copy of the License at                                  //
//                                                                          //
//     http://www.apache.org/licenses/LICENSE-2.0                           //
//                                                                          //
// Unless required by applicable law or agreed to in writing, software      //
// distributed under the License is distributed on an "AS IS" BASIS,        //
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. //
// See the License for the specific language governing permissions and      //
// limitations under the License.                                           //
// ======================================================================== //

#pragma once

#include "default.isph"
#include "api/ref.isph"

struct AccuBuffer 
{
  RefCount base;
  uniform vec2ui size;           /*! size in pixels */
  uniform vec4f* uniform ptr;    /*! float4 pixel buffer */
};

uniform AccuBuffer* uniform AccuBuffer__new(const uniform uint width, const uniform uint height);

inline vec3f AccuBuffer__update(uniform AccuBuffer* uniform this, const int x, const int y, const vec3f c, const int accuMode) 
{
  const int idx = x+this->size.x*y;
  vec4f d = make_vec4f(c.x,c.y,c.z,1.0f);
  vec4f old = this->ptr[idx];
  if (accuMode) d = add(d,old);
  this->ptr[idx] = d; 
  return mul(make_vec3f(d.x,d.y,d.z),rcp(d.w));
}

