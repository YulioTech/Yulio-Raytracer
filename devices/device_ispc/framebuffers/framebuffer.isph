// ======================================================================== //
// Copyright 2009-2013 Intel Corporation                                    //
//                                                                          //
// Licensed under the Apache License, Version 2.0 (the "License");          //
// you may not use this file except in compliance with the License.         //
// You may obtain a copy of the License at                                  //
//                                                                          //
//     http://www.apache.org/licenses/LICENSE-2.0                           //
//                                                                          //
// Unless required by applicable law or agreed to in writing, software      //
// distributed under the License is distributed on an "AS IS" BASIS,        //
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. //
// See the License for the specific language governing permissions and      //
// limitations under the License.                                           //
// ======================================================================== //

#pragma once

#include "default.isph"
#include "api/ref.isph"

struct FrameBuffer; 

typedef void          (*FrameBuffer__set)(uniform FrameBuffer* uniform _this, 
                                          const varying int x, const varying int y, const varying vec3f c);
typedef void* uniform (*FrameBuffer__map)(uniform FrameBuffer* uniform _this);

struct FrameBuffer 
{
  RefCount base;
  uniform vec2ui size;     /*! size in pixels */
  uniform vec2f  invSize;  /*! precomputed 1.f/size.{xy} */ 
  FrameBuffer__set set;
  FrameBuffer__map map;
};

extern uniform int g_serverCount;
extern uniform int g_serverID;

/*! determines if a line is active when rendering in network mode */
inline bool activeLine(int py) {
  const int row = py>>2;
  return ((row-g_serverID) % g_serverCount) == 0;
}

inline uint raster2buffer(uint py) {
  return 4*((py>>2)/g_serverCount)+(py&0x3);
}

void FrameBuffer__Destructor(uniform FrameBuffer* uniform _this);

void FrameBuffer__Constructor(uniform FrameBuffer* uniform _this, 
                              const uniform uint width, 
                              const uniform uint height, 
                              const uniform DestructorFunc destructor,
                              const uniform FrameBuffer__set set, 
                              const uniform FrameBuffer__map map);
