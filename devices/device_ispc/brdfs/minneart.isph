// ======================================================================== //
// Copyright 2009-2013 Intel Corporation                                    //
//                                                                          //
// Licensed under the Apache License, Version 2.0 (the "License");          //
// you may not use this file except in compliance with the License.         //
// You may obtain a copy of the License at                                  //
//                                                                          //
//     http://www.apache.org/licenses/LICENSE-2.0                           //
//                                                                          //
// Unless required by applicable law or agreed to in writing, software      //
// distributed under the License is distributed on an "AS IS" BASIS,        //
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. //
// See the License for the specific language governing permissions and      //
// limitations under the License.                                           //
// ======================================================================== //

#pragma once

#include "brdf.isph"

struct Minneart
{
  uniform BRDF base;

  /*! The reflectance parameter. The vale 0 means no reflection,
   *  and 1 means full reflection. */
  vec3f R;
  
  /*! The amount of backscattering. A value of 0 means lambertian
   *  diffuse, and inf means maximum backscattering. */
  float b;
};

///////////////////////////////////////////////////////////////////////////////
// uniform Minneart

vec3f uniform_Minneart__eval(const uniform BRDF* uniform _this,
                             const vec3f &wo, const DifferentialGeometry &dg, const vec3f &wi) 
{
  const uniform Minneart* uniform this = (const uniform Minneart* uniform) _this;
  const float cosThetaI = clamp(dot(wi,dg.Ns));
  const float backScatter = pow(clamp(dot(wo,wi)), this->b);
  return mul(backScatter * cosThetaI * one_over_pi, this->R);
}

vec3f uniform_Minneart__sample(const uniform BRDF* uniform _this,
                               const vec3f &wo, 
                               const DifferentialGeometry &dg, 
                               Sample3f &wi, 
                               const vec2f &s)  
{
  const uniform Minneart* uniform this = (const uniform Minneart* uniform) _this;
  wi = cosineSampleHemisphere(s.x,s.y,dg.Ns);
  return uniform_Minneart__eval(_this, wo, dg, wi.v);
}

void Minneart__Constructor(uniform Minneart* uniform this, const uniform vec3f R, const uniform float b) 
{
  BRDF__Constructor(&this->base,DIFFUSE_REFLECTION,
                    uniform_Minneart__eval,uniform_Minneart__sample);
  this->R = R;
  this->b = b;
}

uniform Minneart make_Minneart(const uniform vec3f R, const uniform float f) { 
  uniform Minneart m; Minneart__Constructor(&m,R,f); return m; 
}

///////////////////////////////////////////////////////////////////////////////
// varying Minneart

vec3f varying_Minneart__eval(const uniform BRDF* uniform _this,
                             const vec3f &wo, const DifferentialGeometry &dg, const vec3f &wi) 
{
  const varying Minneart* uniform this = (const varying Minneart* uniform) _this;
  const float cosThetaI = clamp(dot(wi,dg.Ns));
  const float backScatter = pow(clamp(dot(wo,wi)), this->b);
  return mul(backScatter * cosThetaI * one_over_pi, this->R);
}

vec3f varying_Minneart__sample(const uniform BRDF* uniform _this,
                               const vec3f &wo, 
                               const DifferentialGeometry &dg, 
                               Sample3f &wi, 
                               const vec2f &s)  
{
  const varying Minneart* uniform this = (const varying Minneart* uniform) _this;
  wi = cosineSampleHemisphere(s.x,s.y,dg.Ns);
  return varying_Minneart__eval(_this, wo, dg, wi.v);
}

void Minneart__Constructor(varying Minneart* uniform this, const varying vec3f R, const varying float b) 
{
  BRDF__Constructor(&this->base,DIFFUSE_REFLECTION,
                    varying_Minneart__eval,varying_Minneart__sample);
  this->R = R;
  this->b = b;
}

varying Minneart make_Minneart(const varying vec3f R, const varying float f) { 
  varying Minneart m; Minneart__Constructor(&m,R,f); return m; 
}
