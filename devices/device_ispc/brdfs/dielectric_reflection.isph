// ======================================================================== //
// Copyright 2009-2013 Intel Corporation                                    //
//                                                                          //
// Licensed under the Apache License, Version 2.0 (the "License");          //
// you may not use this file except in compliance with the License.         //
// You may obtain a copy of the License at                                  //
//                                                                          //
//     http://www.apache.org/licenses/LICENSE-2.0                           //
//                                                                          //
// Unless required by applicable law or agreed to in writing, software      //
// distributed under the License is distributed on an "AS IS" BASIS,        //
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. //
// See the License for the specific language governing permissions and      //
// limitations under the License.                                           //
// ======================================================================== //

#pragma once

#include "brdf.isph"

struct DielectricReflection
{
  uniform BRDF base;
  float eta;
};

///////////////////////////////////////////////////////////////////////////////
// uniform DielectricReflection

inline vec3f uniform_DielectricReflection__eval(const uniform BRDF* uniform _this, const vec3f &wo, const DifferentialGeometry &dg, const vec3f &wi) {
  return make_vec3f(0.f);
}

inline vec3f uniform_DielectricReflection__sample(const uniform BRDF* uniform _this, const vec3f &wo, const DifferentialGeometry &dg, Sample3f &wi, const vec2f &s)
{
  const uniform DielectricReflection* uniform this = (const uniform DielectricReflection* uniform) _this;
  const float cosThetaO = clamp(dot(wo,dg.Ns));
  wi = reflect(wo,dg.Ns,cosThetaO);
  return make_vec3f(fresnelDielectric(cosThetaO,this->eta));
}

inline void DielectricReflection__Constructor(uniform DielectricReflection* uniform this,
                                              const uniform float etai,
                                              const uniform float etat)
{
  BRDF__Constructor(&this->base,SPECULAR_REFLECTION,
                    uniform_DielectricReflection__eval,uniform_DielectricReflection__sample);
  this->eta = etai*rcp(etat);
}

inline uniform DielectricReflection make_DielectricReflection(const uniform float etai, const uniform float etat) {
  uniform DielectricReflection v; DielectricReflection__Constructor(&v,etai,etat); return v;
}

///////////////////////////////////////////////////////////////////////////////
// varying DielectricReflection

inline vec3f varying_DielectricReflection__eval(const uniform BRDF* uniform _this, const vec3f &wo, const DifferentialGeometry &dg, const vec3f &wi) {
  return make_vec3f(0.f);
}

inline vec3f varying_DielectricReflection__sample(const uniform BRDF* uniform _this, const vec3f &wo, const DifferentialGeometry &dg, Sample3f &wi, const vec2f &s)
{
  const varying DielectricReflection* uniform this = (const varying DielectricReflection* uniform) _this;
  const float cosThetaO = clamp(dot(wo,dg.Ns));
  wi = reflect(wo,dg.Ns,cosThetaO);
  return make_vec3f(fresnelDielectric(cosThetaO,this->eta));
}

inline void DielectricReflection__Constructor(varying DielectricReflection* uniform this,
                                              const varying float etai,
                                              const varying float etat)
{
  BRDF__Constructor(&this->base,SPECULAR_REFLECTION,
                    varying_DielectricReflection__eval,varying_DielectricReflection__sample);
  this->eta = etai*rcp(etat);
}

inline varying DielectricReflection make_DielectricReflection(const varying float etai, const varying float etat) {
  varying DielectricReflection v; DielectricReflection__Constructor(&v,etai,etat); return v;
}
