// ======================================================================== //
// Copyright 2009-2013 Intel Corporation                                    //
//                                                                          //
// Licensed under the Apache License, Version 2.0 (the "License");          //
// you may not use this file except in compliance with the License.         //
// You may obtain a copy of the License at                                  //
//                                                                          //
//     http://www.apache.org/licenses/LICENSE-2.0                           //
//                                                                          //
// Unless required by applicable law or agreed to in writing, software      //
// distributed under the License is distributed on an "AS IS" BASIS,        //
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. //
// See the License for the specific language governing permissions and      //
// limitations under the License.                                           //
// ======================================================================== //

#pragma once

#include "optics.isph"
#include "shapes/differentialgeometry.isph"

#define SPECULAR_REFLECTION   (1<<0)  /*!< diffuse light reflection            */
#define DIFFUSE_REFLECTION    (1<<1)  /*!< glossy light reflection             */
#define GLOSSY_REFLECTION     (1<<2)  /*!< perfect specular light reflection   */
#define DIFFUSE_TRANSMISSION  (1<<3)  /*!< diffuse light transmission          */
#define GLOSSY_TRANSMISSION   (1<<4)  /*!< glossy light transmission           */
#define SPECULAR_TRANSMISSION (1<<5)  /*!< perfect specular light transmission */

/*! diffuse reflections and transmissions          */
#define DIFFUSE      (DIFFUSE_REFLECTION   | DIFFUSE_TRANSMISSION) 

/*! glossy reflections and transmissions           */
#define GLOSSY       (GLOSSY_REFLECTION    | GLOSSY_TRANSMISSION) 

/*! perfect specular reflections and transmissions */
#define SPECULAR     (SPECULAR_REFLECTION  | SPECULAR_TRANSMISSION) 

/*!< all possible reflections   */
#define REFLECTION   (DIFFUSE_REFLECTION   | GLOSSY_REFLECTION   | SPECULAR_REFLECTION) 

/*!< all possible transmissions */
#define TRANSMISSION (DIFFUSE_TRANSMISSION | GLOSSY_TRANSMISSION|SPECULAR_TRANSMISSION)

/*!< no component set   */
#define NONE         0

/*!< all components set */
#define ALL          (REFLECTION | TRANSMISSION)

struct BRDF;

typedef uint BRDFType;

typedef vec3f (*BRDF__EvalFunc)(const uniform BRDF* uniform this, 
                                const vec3f &wo, const DifferentialGeometry &dg, const vec3f &wi);

typedef vec3f (*BRDF__SampleFunc)(const uniform BRDF* uniform this,
                                  const vec3f &wo, const DifferentialGeometry &dg, Sample3f &wi, const vec2f &s);

struct BRDF 
{
  uint brdfType;
  BRDF__EvalFunc eval;
  BRDF__SampleFunc sample;
};

inline void BRDF__Constructor(uniform BRDF* uniform this,
                              const uniform uint brdfType,
                              const uniform BRDF__EvalFunc eval_,
                              const uniform BRDF__SampleFunc sample_)
{
  this->brdfType = brdfType;
  this->eval = eval_;
  this->sample = sample_;
}
