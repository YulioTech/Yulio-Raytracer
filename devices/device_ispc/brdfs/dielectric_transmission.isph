// ======================================================================== //
// Copyright 2009-2013 Intel Corporation                                    //
//                                                                          //
// Licensed under the Apache License, Version 2.0 (the "License");          //
// you may not use this file except in compliance with the License.         //
// You may obtain a copy of the License at                                  //
//                                                                          //
//     http://www.apache.org/licenses/LICENSE-2.0                           //
//                                                                          //
// Unless required by applicable law or agreed to in writing, software      //
// distributed under the License is distributed on an "AS IS" BASIS,        //
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. //
// See the License for the specific language governing permissions and      //
// limitations under the License.                                           //
// ======================================================================== //

#pragma once

#include "brdf.isph"

///////////////////////////////////////////////////////

struct DielectricTransmission
{
  uniform BRDF base;
  float eta;
};

///////////////////////////////////////////////////////////////////////////////
// uniform DielectricReflection

inline vec3f uniform_DielectricTransmission__eval(const uniform BRDF* uniform _this,
                                                  const vec3f &wo, 
                                                  const DifferentialGeometry &dg, 
                                                  const vec3f &wi)  
{
  return make_vec3f(0.f);
}

inline vec3f uniform_DielectricTransmission__sample(const uniform BRDF* uniform _this,
                                                    const vec3f &wo, 
                                                    const DifferentialGeometry &dg,
                                                    Sample3f &wi, 
                                                    const vec2f &s)
{
  const uniform DielectricTransmission* uniform this = (const uniform DielectricTransmission* uniform) _this;
  float cosThetaO = clamp(dot(wo,dg.Ns));
  float cosThetaI; wi = refract(wo,dg.Ns,this->eta,cosThetaO,cosThetaI);
  return make_vec3f(1.0f-fresnelDielectric(cosThetaO,cosThetaI,this->eta));
}

inline void DielectricTransmission__Constructor(uniform DielectricTransmission* uniform this,
                                                const uniform float etai, const uniform float etat)
{
  BRDF__Constructor(&this->base,SPECULAR_TRANSMISSION,
                    uniform_DielectricTransmission__eval,uniform_DielectricTransmission__sample);
  this->eta = etai*rcp(etat);
}

///////////////////////////////////////////////////////////////////////////////
// varying DielectricReflection

inline vec3f varying_DielectricTransmission__eval(const uniform BRDF* uniform _this,
                                                  const vec3f &wo, 
                                                  const DifferentialGeometry &dg, 
                                                  const vec3f &wi)  
{
  return make_vec3f(0.f);
}

inline vec3f varying_DielectricTransmission__sample(const uniform BRDF* uniform _this,
                                                    const vec3f &wo, 
                                                    const DifferentialGeometry &dg,
                                                    Sample3f &wi, 
                                                    const vec2f &s)
{
  const varying DielectricTransmission* uniform this = (const varying DielectricTransmission* uniform) _this;
  float cosThetaO = clamp(dot(wo,dg.Ns));
  float cosThetaI; wi = refract(wo,dg.Ns,this->eta,cosThetaO,cosThetaI);
  return make_vec3f(1.0f-fresnelDielectric(cosThetaO,cosThetaI,this->eta));
}

inline void DielectricTransmission__Constructor(varying DielectricTransmission* uniform this,
                                                const varying float etai, const varying float etat)
{
  BRDF__Constructor(&this->base,SPECULAR_TRANSMISSION,
                    varying_DielectricTransmission__eval,varying_DielectricTransmission__sample);
  this->eta = etai*rcp(etat);
}

///////////////////////////////////////////////////////

struct ThinDielectricTransmission
{
  uniform BRDF base;

  /*! Relative refraction index etai/etat of both media. */
  float eta;
  
  /*! Logarithm of volumetric transmission coefficient. */
  vec3f logT;
  
  /*! Thickness of the medium. */
  float thickness;
};

///////////////////////////////////////////////////////////////////////////////
// uniform ThinDielectricReflection

inline vec3f uniform_ThinDielectricTransmission__eval(const uniform BRDF* uniform _this,
                                                      const vec3f &wo, 
                                                      const DifferentialGeometry &dg, 
                                                      const vec3f &wi)  
{
  return make_vec3f(0.f);
}

inline vec3f uniform_ThinDielectricTransmission__sample(const uniform BRDF* uniform _this,
                                                        const vec3f &wo, 
                                                        const DifferentialGeometry &dg,
                                                        Sample3f &wi, 
                                                        const vec2f &s)
{
  const uniform ThinDielectricTransmission* uniform this = (const uniform ThinDielectricTransmission* uniform) _this;
  wi = make_Sample3f(neg(wo),1.0f);
  const float cosTheta = clamp(dot(wo,dg.Ns));
  if (cosTheta <= 0.0f) return make_vec3f(0.0f);
  const float alpha = this->thickness * rcp(cosTheta);
  return mul(exp(mul(this->logT,alpha)), (1.0f-fresnelDielectric(cosTheta,this->eta)));
}

inline void ThinDielectricTransmission__Constructor(uniform ThinDielectricTransmission* uniform this,
                                                    const uniform float etai, const uniform float etat, const uniform vec3f T, const uniform float thickness)
{
  BRDF__Constructor(&this->base,SPECULAR_TRANSMISSION,uniform_ThinDielectricTransmission__eval,uniform_ThinDielectricTransmission__sample);
  this->eta = etai*rcp(etat);
  //this->logT = make_vec3f(log(T.x),log(T.y),log(T.z)); // FIXME: ISPC bug __log_uniform_float is undefined on KNC
  this->logT = make_vec3f(reduce_min(log((varying float)T.x)),
                          reduce_min(log((varying float)T.y)),
                          reduce_min(log((varying float)T.z)));
  this->thickness = thickness;
}

///////////////////////////////////////////////////////////////////////////////
// varying ThinDielectricReflection

inline vec3f varying_ThinDielectricTransmission__eval(const uniform BRDF* uniform _this,
                                                      const vec3f &wo, 
                                                      const DifferentialGeometry &dg, 
                                                      const vec3f &wi)  
{
  return make_vec3f(0.f);
}

inline vec3f varying_ThinDielectricTransmission__sample(const uniform BRDF* uniform _this,
                                                        const vec3f &wo, 
                                                        const DifferentialGeometry &dg,
                                                        Sample3f &wi, 
                                                        const vec2f &s)
{
  const varying ThinDielectricTransmission* uniform this = (const varying ThinDielectricTransmission* uniform) _this;
  wi = make_Sample3f(neg(wo),1.0f);
  const float cosTheta = clamp(dot(wo,dg.Ns));
  if (cosTheta <= 0.0f) return make_vec3f(0.0f);
  const float alpha = this->thickness * rcp(cosTheta);
  return mul(exp(mul(this->logT,alpha)), (1.0f-fresnelDielectric(cosTheta,this->eta)));
}

inline void ThinDielectricTransmission__Constructor(varying ThinDielectricTransmission* uniform this,
                                                    const varying float etai, const varying float etat, const varying vec3f T, const varying float thickness)
{
  BRDF__Constructor(&this->base,SPECULAR_TRANSMISSION,varying_ThinDielectricTransmission__eval,varying_ThinDielectricTransmission__sample);
  this->eta = etai*rcp(etat);
  this->logT = make_vec3f(log(T.x),log(T.y),log(T.z));
  this->thickness = thickness;
}
