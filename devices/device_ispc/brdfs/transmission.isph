// ======================================================================== //
// Copyright 2009-2013 Intel Corporation                                    //
//                                                                          //
// Licensed under the Apache License, Version 2.0 (the "License");          //
// you may not use this file except in compliance with the License.         //
// You may obtain a copy of the License at                                  //
//                                                                          //
//     http://www.apache.org/licenses/LICENSE-2.0                           //
//                                                                          //
// Unless required by applicable law or agreed to in writing, software      //
// distributed under the License is distributed on an "AS IS" BASIS,        //
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. //
// See the License for the specific language governing permissions and      //
// limitations under the License.                                           //
// ======================================================================== //

#pragma once

#include "brdf.isph"
#include "optics.isph"

struct Transmission
{
  uniform BRDF base;

  /*! Transmission coefficient of the material. The range is [0,1]
   *  where 0 means total absorption and 1 means total
   *  transmission. */
  vec3f T;
};

inline vec3f Transmission__eval(const uniform BRDF* uniform _this,
                                const vec3f &wo, const DifferentialGeometry &dg, const vec3f &wi) 
{
  return make_vec3f(0.0f);
}

inline vec3f Transmission__sample(const uniform BRDF* uniform _this,
                                const vec3f &wo, 
                                const DifferentialGeometry &dg, 
                                Sample3f &wi, 
                                const vec2f &s)  
{
  const varying Transmission* uniform this = (const varying Transmission* uniform) _this;
  wi = make_Sample3f(neg(wo),1.0f);
  return this->T;
}

inline void Transmission__Constructor(varying Transmission* uniform this,
                                      const varying vec3f T)
{
  BRDF__Constructor(&this->base,SPECULAR_TRANSMISSION,
                    Transmission__eval,Transmission__sample);
  this->T = T;
}
