// ======================================================================== //
// Copyright 2009-2013 Intel Corporation                                    //
//                                                                          //
// Licensed under the Apache License, Version 2.0 (the "License");          //
// you may not use this file except in compliance with the License.         //
// You may obtain a copy of the License at                                  //
//                                                                          //
//     http://www.apache.org/licenses/LICENSE-2.0                           //
//                                                                          //
// Unless required by applicable law or agreed to in writing, software      //
// distributed under the License is distributed on an "AS IS" BASIS,        //
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. //
// See the License for the specific language governing permissions and      //
// limitations under the License.                                           //
// ======================================================================== //

#pragma once

#include "brdf.isph"

#define maxComponents 64
#define maxBytes (16*1024)
#define alignment 64

struct CompositedBRDF
{
  /*! Data storage. Has to be at the beginning of the class due to alignment. */
  uniform int8 data[maxBytes];           //!< Storage for BRDF components
  uint numBytes;                         //!< Number of bytes occupied in storage
  
  /*! BRDF list */
  varying bool active[maxComponents];
  const uniform BRDF* brdfs[maxComponents];   //!< pointers to BRDF components
  uniform uint numBrdfs;                //!< number of stored BRDF components

  varying uint brdfTypes;              //!< combined BRDF type
};

inline void CompositedBRDF__Constructor(uniform CompositedBRDF* uniform this) 
{
  this->numBrdfs = 0;
  this->numBytes = 0;
  this->brdfTypes = 0;
}

/*! Allocates aligned data for new BRDF component. */
inline void* uniform CompositedBRDF__alloc(uniform CompositedBRDF* uniform this, uniform uint bytes)
{
  void* uniform ptr = &this->data[this->numBytes];
  this->numBytes = (this->numBytes+bytes+alignment-1)&((uint)(-alignment));
  if (this->numBytes>maxBytes) return NULL;
    //  throw std::runtime_error("out of memory for BRDF allocation");
  return ptr;
}

/*! Adds a new BRDF to the list of BRDFs */
inline void CompositedBRDF__add(uniform CompositedBRDF* uniform this,
                                const uniform BRDF* uniform brdf)
{
  assert(this->numBrdfs < maxComponents);
  if (this->numBrdfs < maxComponents) {
    unmasked { 
      this->active[this->numBrdfs] = false; 
    }
    this->active[this->numBrdfs] = true;
    this->brdfs[this->numBrdfs] = brdf;
    this->brdfTypes |= brdf->brdfType;
    this->numBrdfs++;
  }
}

#define COMPOSITED_BRDF_ADD(brdfs,Material,...) {                       \
  varying Material* uniform ptr = (varying Material* uniform) CompositedBRDF__alloc(&brdfs,sizeof(Material)); \
  if (ptr) {                                                            \
    Material##__Constructor(ptr,__VA_ARGS__);                             \
    CompositedBRDF__add(&brdfs,&ptr->base);                               \
  }                                              \
}

/*! Evaluates all BRDF components. */
inline vec3f CompositedBRDF__eval(const uniform CompositedBRDF* uniform this,
                                  const vec3f& wo, const DifferentialGeometry& dg, const vec3f& wi, const uniform BRDFType type)
{
  vec3f c = make_vec3f(0.0f);
  for (uniform int i=0; i<this->numBrdfs; i++) {
#if 1
    if (this->active[i])
      if (this->brdfs[i]->brdfType & type) {
        const uniform BRDF* uniform brdf = this->brdfs[i];
        c = add(c, brdf->eval(brdf,wo,dg,wi));
      }
#else
    if (!this->active[i]) continue;

    if (this->brdfs[i]->brdfType & type) {
      const uniform BRDF* uniform brdf = this->brdfs[i];
      c = add(c, brdf->eval(brdf,wo,dg,wi));
    }
#endif
  }

  return c;
}

/*! Sample the composited BRDF. We are evaluating all BRDF
 *  components and then importance sampling one of them. */
inline vec3f CompositedBRDF__sample(const uniform CompositedBRDF* uniform this,
                                    const vec3f               & wo,          /*!< Direction light is reflected into.                    */
                                    const DifferentialGeometry& dg,          /*!< Shade location on a surface to sample the BRDF at.    */
                                    Sample3f                  & wi_o,        /*!< Returns sampled incoming light direction and PDF.     */
                                    BRDFType                  & type_o,      /*!< Returns the type flags of samples component.          */
                                    const vec2f               & s,           /*!< Sample locations for BRDF are provided by the caller. */
                                    float                       ss,          /*!< Sample to select the BRDF component.                  */
                                    const uniform BRDFType    & type)        /*!< The type of BRDF components to consider.              */
{
#if 1
  /*! special case for one component */
  if (this->numBrdfs == 1) 
  {
    if (this->active[0] & (bool)(this->brdfs[0]->brdfType & type)) {
      const vec3f c = this->brdfs[0]->sample(this->brdfs[0], wo, dg, wi_o, s);
      if (eq(c,make_vec3f(0.0f)) | wi_o.pdf <= 0.0f) return make_vec3f(0.0f);
      type_o = this->brdfs[0]->brdfType;
      return c;
    }
    return make_vec3f(0.0f);
  }

  /*! special case for two components */
  else if (this->numBrdfs == 2) 
  {
    Sample3f wi0; const vec3f c0 = this->brdfs[0]->sample(this->brdfs[0], wo, dg, wi0, s);
    Sample3f wi1; const vec3f c1 = this->brdfs[1]->sample(this->brdfs[1], wo, dg, wi1, s);
    const bool valid0 = this->active[0] & ne(c0,make_vec3f(0.0f)) & wi0.pdf > 0.0f;
    const bool valid1 = this->active[1] & ne(c1,make_vec3f(0.0f)) & wi1.pdf > 0.0f;
    if (valid0 & valid1) {
      const float f0 = (c0.x + c0.y + c0.z) * rcp(wi0.pdf);
      const float f1 = (c1.x + c1.y + c1.z) * rcp(wi1.pdf);
      const float fr = rcp(f0+f1);
      const float n0 = f0*fr;// /(f0+f1);
      const float n1 = f1*fr;// /(f0+f1);
      if (ss < n0) { wi_o = make_Sample3f(wi0.v,wi0.pdf*n0); type_o = this->brdfs[0]->brdfType; return c0; }
      else         { wi_o = make_Sample3f(wi1.v,wi1.pdf*n1); type_o = this->brdfs[1]->brdfType; return c1; }
    }
    else if (valid0) { wi_o = wi0; type_o = this->brdfs[0]->brdfType; return c0; }
    else if (valid1) { wi_o = wi1; type_o = this->brdfs[1]->brdfType; return c1; }
    else { return make_vec3f(0.0f); }
  }

  /*! fall back for more than 2 components */
  else 
#endif
  {
    /*! probability distribution to sample between BRDF components */
    float f[maxComponents];
    float sum = 0.0f;
    
    /*! stores sampling of each BRDF component */
    vec3f colors[maxComponents];
    Sample3f samples[maxComponents];
    BRDFType types[maxComponents];
    int num = 0;

    
    /*! sample each BRDF component and build probability distribution */
    for (uniform int i = 0; i<this->numBrdfs; i++) {
      if (!this->active[i]) continue;
      if (!(this->brdfs[i]->brdfType & type)) continue;
      const uniform BRDF* uniform brdf = this->brdfs[i];
      Sample3f wi; 
      vec3f c = brdf->sample(brdf, wo, dg, wi, s);
      if (eq(c,make_vec3f(0.0f)) | wi.pdf <= 0.0f) continue;

      sum += f[num] = (c.x + c.y + c.z) * rcp(wi.pdf);

      colors[num] = c;
      samples[num] = wi;
      types[num] = this->brdfs[i]->brdfType;
      num++;
    }
    
    /*! exit if we did not find any valid component */
    if (num == 0) 
      return make_vec3f(0.0f);
    
    /*! normalize distribution */
    const float invSum = rcp(sum);
    for (uniform int i = 0; i<num; i++) f[i] *= invSum; ///= sum;
    
    /*! compute accumulated distribution */
    float d[maxComponents];
    d[0] = f[0];
    for (uniform int i=1; i<num-1; i++) {
      d[i] = d[i-1] + f[i];
    }
    d[num-1] = 1.0f;
    
#if 0
    int found = 0;
    for (uniform int i=0;i<num-1;i++)
      if (ss < d[i]) found = i;
      // if (ss > d[i]) found = i+1;
    wi_o = make_Sample3f(samples[found].v,samples[found].pdf*f[found]);
    type_o = types[found];
    return colors[found];
#else
    /*! sample distribution */
    int i = 0; while (i<num-1 & ss > d[i]) i++;
    
    /*! return */
    wi_o = make_Sample3f(samples[i].v,samples[i].pdf*f[i]);
    type_o = types[i];
    return colors[i];
#endif
  }
}
