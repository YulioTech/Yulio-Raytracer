// ======================================================================== //
// Copyright 2009-2013 Intel Corporation                                    //
//                                                                          //
// Licensed under the Apache License, Version 2.0 (the "License");          //
// you may not use this file except in compliance with the License.         //
// You may obtain a copy of the License at                                  //
//                                                                          //
//     http://www.apache.org/licenses/LICENSE-2.0                           //
//                                                                          //
// Unless required by applicable law or agreed to in writing, software      //
// distributed under the License is distributed on an "AS IS" BASIS,        //
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. //
// See the License for the specific language governing permissions and      //
// limitations under the License.                                           //
// ======================================================================== //

#pragma once

#include "brdf.isph"
#include "microfacet_metal.isph"

struct DielectricLayerMicrofacetMetal
{
  uniform BRDF base;
  vec3f T;             //!< Transmission coefficient of dielectricum
  float etait;         //!< Relative refraction index etai/etat of both media
  float etati;         //!< relative refraction index etat/etai of both media
  MicrofacetMetal ground;   //!< the BRDF of the ground layer
};

inline vec3f DielectricLayerMicrofacetMetal__eval(const uniform BRDF* uniform _this,
                                             const vec3f &wo, const DifferentialGeometry &dg, const vec3f &wi) 
{
  const uniform DielectricLayerMicrofacetMetal* uniform this = 
    (const uniform DielectricLayerMicrofacetMetal* uniform) _this;

  const float cosThetaO = dot(wo,dg.Ns);
  const float cosThetaI = dot(wi,dg.Ns);
  if (cosThetaI <= 0.0f | cosThetaO <= 0.0f) return make_vec3f(0.f);
  float cosThetaO1; 
  const Sample3f wo1 = refract(wo,dg.Ns,this->etait,cosThetaO,cosThetaO1);
  float cosThetaI1; 
  const Sample3f wi1 = refract(wi,dg.Ns,this->etait,cosThetaI,cosThetaI1);
  const float Fi = 1.0f - fresnelDielectric(cosThetaI,cosThetaI1,this->etait);
  const vec3f Fg = this->ground.base.eval(&this->ground.base,neg(wo1.v),dg,neg(wi1.v));
  const float Fo = 1.0f - fresnelDielectric(cosThetaO,cosThetaO1,this->etait);
  //return Fo * this->T * Fg * this->T * Fi;
  return mul(mul(mul(Fo,this->T), mul(Fg, this->T)),Fi);
}

inline vec3f DielectricLayerMicrofacetMetal__sample(const uniform BRDF* uniform _this,
                                               const vec3f &wo, 
                                               const DifferentialGeometry &dg, 
                                               Sample3f &wi, 
                                               const vec2f &s)  
{
  const uniform DielectricLayerMicrofacetMetal* uniform this = 
    (const uniform DielectricLayerMicrofacetMetal* uniform) _this;

  /*! refract ray into medium */
  float cosThetaO = dot(wo,dg.Ns);
  if (cosThetaO <= 0.0f) return make_vec3f(0.f);
  float cosThetaO1; Sample3f wo1 = refract(wo,dg.Ns,this->etait,cosThetaO,cosThetaO1);
  
  /*! sample ground BRDF */
  Sample3f wi1 = make_Sample3f(make_vec3f(0.f),1.f); 
  vec3f Fg = this->ground.base.sample(&this->ground.base,neg(wo1.v),dg,wi1,s);
  
  /*! refract ray out of medium */
  float cosThetaI1 = dot(wi1.v,dg.Ns);
  if (cosThetaI1 <= 0.0f) return make_vec3f(0.f);
  
  float cosThetaI; 
  Sample3f wi0 = refract(neg(wi1.v),neg(dg.Ns),this->etati,cosThetaI1,cosThetaI);
  if (wi0.pdf == 0.0f) return make_vec3f(0.f);
  
  /*! accumulate contribution of path */
  wi = make_Sample3f(wi0.v,wi1.pdf);
  float Fi = 1.0f - fresnelDielectric(cosThetaI,cosThetaI1,this->etait);
  float Fo = 1.0f - fresnelDielectric(cosThetaO,cosThetaO1,this->etait);
  return mul(mul(mul(Fo,this->T), mul(Fg, this->T)),Fi);
}

inline void DielectricLayerMicrofacetMetal__Constructor(uniform DielectricLayerMicrofacetMetal* uniform this,
                                                   const uniform vec3f T, 
                                                   const uniform float etai, 
                                                   const uniform float etat, 
                                                   const uniform MicrofacetMetal ground)
{
  BRDF__Constructor(&this->base,DIFFUSE_REFLECTION,
                    DielectricLayerMicrofacetMetal__eval,DielectricLayerMicrofacetMetal__sample);
  this->T = T;
  this->etait = etai*rcp(etat);
  this->etati = etat*rcp(etai);
  this->ground = ground;
}

inline uniform DielectricLayerMicrofacetMetal make_DielectricLayerMicrofacetMetal(const uniform vec3f T, 
                                                                                  const uniform float etai, 
                                                                                  const uniform float etat, 
                                                                                  const uniform MicrofacetMetal ground)
{
  uniform DielectricLayerMicrofacetMetal m; 
  DielectricLayerMicrofacetMetal__Constructor(&m,T,etai,etat,ground);
  return m;
}
