// ======================================================================== //
// Copyright 2009-2013 Intel Corporation                                    //
//                                                                          //
// Licensed under the Apache License, Version 2.0 (the "License");          //
// you may not use this file except in compliance with the License.         //
// You may obtain a copy of the License at                                  //
//                                                                          //
//     http://www.apache.org/licenses/LICENSE-2.0                           //
//                                                                          //
// Unless required by applicable law or agreed to in writing, software      //
// distributed under the License is distributed on an "AS IS" BASIS,        //
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. //
// See the License for the specific language governing permissions and      //
// limitations under the License.                                           //
// ======================================================================== //

#pragma once

#include "default.isph"

struct Camera;

typedef void (*RayFunc)(const uniform Camera *uniform this,
                        varying Ray &ray,
                        const varying vec2f pixel,     /*!< The pixel location on the on image plane in the range from 0 to 1. */
                        const varying vec2f sample);   /*!< The lens sample in [0,1) for depth of field. */

struct Camera 
{
  RefCount base;

  /*! Computes a primary ray for a pixel. */
  RayFunc initRay;
};

inline void Camera__Destructor(uniform RefCount* uniform this) {
  LOG(print("Camera__Destructor\n"));
  RefCount__Destructor(this);
}

inline void Camera__Constructor(uniform Camera* uniform this, uniform DestructorFunc destructor, uniform RayFunc ray) 
{
  LOG(print("Camera__Constructor\n"));
  RefCount__Constructor(&this->base,destructor);
  this->initRay = ray;
}
