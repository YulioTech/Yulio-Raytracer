// ======================================================================== //
// Copyright 2009-2013 Intel Corporation                                    //
//                                                                          //
// Licensed under the Apache License, Version 2.0 (the "License");          //
// you may not use this file except in compliance with the License.         //
// You may obtain a copy of the License at                                  //
//                                                                          //
//     http://www.apache.org/licenses/LICENSE-2.0                           //
//                                                                          //
// Unless required by applicable law or agreed to in writing, software      //
// distributed under the License is distributed on an "AS IS" BASIS,        //
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. //
// See the License for the specific language governing permissions and      //
// limitations under the License.                                           //
// ======================================================================== //

#ifndef __EMBREE_ISPC_VEC3F_H__
#define __EMBREE_ISPC_VEC3F_H__

struct vec3f 
{
  float x;
  float y;
  float z;
};

////////////////////////////////////////////////////////////////////////////////
/// Constructors
////////////////////////////////////////////////////////////////////////////////

inline uniform vec3f make_vec3f(const uniform float a) { uniform vec3f v; v.x = a; v.y = a; v.z = a; return v; }
inline varying vec3f make_vec3f(const varying float a) { varying vec3f v; v.x = a; v.y = a; v.z = a; return v; }

inline uniform vec3f make_vec3f(const uniform float x, const uniform float y, const uniform float z) { uniform vec3f v; v.x = x; v.y = y; v.z = z; return v; }
inline varying vec3f make_vec3f(const varying float x, const varying float y, const varying float z) { varying vec3f v; v.x = x; v.y = y; v.z = z; return v; }

////////////////////////////////////////////////////////////////////////////////
/// Unary Operators
////////////////////////////////////////////////////////////////////////////////

inline uniform vec3f neg(const uniform vec3f a) { return make_vec3f(-a.x,-a.y,-a.z); }
inline varying vec3f neg(const varying vec3f a) { return make_vec3f(-a.x,-a.y,-a.z); }

inline uniform vec3f abs(const uniform vec3f a) { return make_vec3f(abs(a.x),abs(a.y),abs(a.z)); }
inline varying vec3f abs(const varying vec3f a) { return make_vec3f(abs(a.x),abs(a.y),abs(a.z)); }

inline uniform vec3f rcp(const uniform vec3f a) { return make_vec3f(rcp(a.x),rcp(a.y),rcp(a.z)); }
inline varying vec3f rcp(const varying vec3f a) { return make_vec3f(rcp(a.x),rcp(a.y),rcp(a.z)); }

inline uniform vec3f rcp_safe(const uniform vec3f a) { return make_vec3f(rcp_safe(a.x), rcp_safe(a.y), rcp_safe(a.z)); }
inline varying vec3f rcp_safe(const varying vec3f a) { return make_vec3f(rcp_safe(a.x), rcp_safe(a.y), rcp_safe(a.z)); }

inline uniform vec3f exp(const uniform vec3f a) { return make_vec3f(exp(a.x),exp(a.y),exp(a.z)); }
inline varying vec3f exp(const varying vec3f a) { return make_vec3f(exp(a.x),exp(a.y),exp(a.z)); }

////////////////////////////////////////////////////////////////////////////////
/// Binary Operators
////////////////////////////////////////////////////////////////////////////////

inline uniform vec3f add(const uniform vec3f a, const uniform vec3f b) { return make_vec3f(a.x+b.x, a.y+b.y, a.z+b.z); }
inline varying vec3f add(const varying vec3f a, const varying vec3f b) { return make_vec3f(a.x+b.x, a.y+b.y, a.z+b.z); }

inline uniform vec3f add(const uniform vec3f a, const uniform vec3f b, const uniform vec3f c) { return add(add(a,b),c); }
inline varying vec3f add(const varying vec3f a, const varying vec3f b, const varying vec3f c) { return add(add(a,b),c); }

inline uniform vec3f add(const uniform vec3f a, const uniform vec3f b, const uniform vec3f c, const uniform vec3f d) { return add(add(a,b),add(c,d)); }
inline varying vec3f add(const varying vec3f a, const varying vec3f b, const varying vec3f c, const varying vec3f d) { return add(add(a,b),add(c,d)); }

inline uniform vec3f sub(const uniform vec3f a, const uniform vec3f b) { return make_vec3f(a.x-b.x, a.y-b.y, a.z-b.z); }
inline varying vec3f sub(const varying vec3f a, const varying vec3f b) { return make_vec3f(a.x-b.x, a.y-b.y, a.z-b.z); }

inline uniform vec3f mul(const uniform float a, const uniform vec3f b) { return make_vec3f(a*b.x, a*b.y, a*b.z); }
inline varying vec3f mul(const varying float a, const varying vec3f b) { return make_vec3f(a*b.x, a*b.y, a*b.z); }

inline uniform vec3f mul(const uniform vec3f a, const uniform float b) { return make_vec3f(a.x*b, a.y*b, a.z*b); }
inline varying vec3f mul(const varying vec3f a, const varying float b) { return make_vec3f(a.x*b, a.y*b, a.z*b); }

inline uniform vec3f mul(const uniform vec3f a, const uniform vec3f b) { return make_vec3f(a.x*b.x, a.y*b.y, a.z*b.z); }
inline varying vec3f mul(const varying vec3f a, const varying vec3f b) { return make_vec3f(a.x*b.x, a.y*b.y, a.z*b.z); }

inline uniform vec3f div(const uniform float a, const uniform vec3f b) { return make_vec3f(a/b.x, a/b.y, a/b.z); }
inline varying vec3f div(const varying float a, const varying vec3f b) { return make_vec3f(a/b.x, a/b.y, a/b.z); }

inline uniform vec3f div(const uniform vec3f a, const uniform float b) { return make_vec3f(a.x/b, a.y/b, a.z/b); }
inline varying vec3f div(const varying vec3f a, const varying float b) { return make_vec3f(a.x/b, a.y/b, a.z/b); }

inline uniform vec3f div(const uniform vec3f a, const uniform vec3f b) { return make_vec3f(a.x/b.x, a.y/b.y, a.z/b.z); }
inline varying vec3f div(const varying vec3f a, const varying vec3f b) { return make_vec3f(a.x/b.x, a.y/b.y, a.z/b.z); }

inline uniform vec3f min(const uniform vec3f a, const uniform vec3f b) { return make_vec3f(min(a.x,b.x),min(a.y,b.y),min(a.z,b.z)); }
inline varying vec3f min(const varying vec3f a, const varying vec3f b) { return make_vec3f(min(a.x,b.x),min(a.y,b.y),min(a.z,b.z)); }

inline uniform vec3f max(const uniform vec3f a, const uniform vec3f b) { return make_vec3f(max(a.x,b.x),max(a.y,b.y),max(a.z,b.z)); }
inline varying vec3f max(const varying vec3f a, const varying vec3f b) { return make_vec3f(max(a.x,b.x),max(a.y,b.y),max(a.z,b.z)); }

inline uniform vec3f pow(const uniform vec3f a, const uniform float b) { return make_vec3f(pow(a.x,b), pow(a.y,b), pow(a.z,b)); }
inline varying vec3f pow(const varying vec3f a, const varying float b) { return make_vec3f(pow(a.x,b), pow(a.y,b), pow(a.z,b)); }

////////////////////////////////////////////////////////////////////////////////
/// Reduction Operators
////////////////////////////////////////////////////////////////////////////////

inline uniform float reduce_add(const uniform vec3f a) { return a.x+a.y+a.z; }
inline varying float reduce_add(const varying vec3f a) { return a.x+a.y+a.z; }

inline uniform float reduce_mul(const uniform vec3f a) { return a.x*a.y*a.z; }
inline varying float reduce_mul(const varying vec3f a) { return a.x*a.y*a.z; }

inline uniform float reduce_min(const uniform vec3f a) { return min(min(a.x,a.y),a.z); }
inline varying float reduce_min(const varying vec3f a) { return min(min(a.x,a.y),a.z); }

inline uniform float reduce_max(const uniform vec3f a) { return max(max(a.x,a.y),a.z); }
inline varying float reduce_max(const varying vec3f a) { return max(max(a.x,a.y),a.z); }

inline uniform vec3f __reduce_min(const varying vec3f a) { return make_vec3f(reduce_min(a.x),reduce_min(a.y),reduce_min(a.z)); }
inline uniform vec3f __reduce_max(const varying vec3f a) { return make_vec3f(reduce_max(a.x),reduce_max(a.y),reduce_max(a.z)); }

////////////////////////////////////////////////////////////////////////////////
/// Comparison Operators
////////////////////////////////////////////////////////////////////////////////

inline uniform bool eq(const uniform vec3f a, const uniform vec3f b) { return (a.x == b.x) & (a.y == b.y) & (a.z == b.z); }
inline varying bool eq(const varying vec3f a, const varying vec3f b) { return (a.x == b.x) & (a.y == b.y) & (a.z == b.z); }

inline uniform bool ne(const uniform vec3f a, const uniform vec3f b) { return (a.x != b.x) | (a.y != b.y) | (a.z != b.z); }
inline varying bool ne(const varying vec3f a, const varying vec3f b) { return (a.x != b.x) | (a.y != b.y) | (a.z != b.z); }

////////////////////////////////////////////////////////////////////////////////
/// Euclidian Space Operators
////////////////////////////////////////////////////////////////////////////////

inline uniform float dot(const uniform vec3f a, const uniform vec3f b) { return a.x*b.x+a.y*b.y+a.z*b.z; }
inline varying float dot(const varying vec3f a, const varying vec3f b) { return a.x*b.x+a.y*b.y+a.z*b.z; }

inline uniform float length(const uniform vec3f a) { return sqrt(dot(a,a)); }
inline varying float length(const varying vec3f a) { return sqrt(dot(a,a)); }

inline uniform vec3f normalize(const uniform vec3f a) { return mul(rsqrt(dot(a,a)),a); }
inline varying vec3f normalize(const varying vec3f a) { return mul(rsqrt(dot(a,a)),a); }

inline uniform float distance(const uniform vec3f a, const uniform vec3f b) { return length(sub(a,b)); }
inline varying float distance(const varying vec3f a, const uniform vec3f b) { return length(sub(a,b)); }

inline uniform vec3f cross(const uniform vec3f a, const uniform vec3f b) { 
  return make_vec3f(a.y*b.z-a.z*b.y,a.z*b.x-a.x*b.z,a.x*b.y-a.y*b.x);
}
inline varying vec3f cross(const varying vec3f a, const varying vec3f b) { 
  return make_vec3f(a.y*b.z-a.z*b.y,a.z*b.x-a.x*b.z,a.x*b.y-a.y*b.x);
}

inline uniform vec3f lerp(const uniform float s, const uniform vec3f v0, const uniform vec3f v1) { return add(mul(1.0f-s,v0),mul(s,v1)); }
inline varying vec3f lerp(const varying float s, const varying vec3f v0, const varying vec3f v1) { return add(mul(1.0f-s,v0),mul(s,v1)); }

#endif
