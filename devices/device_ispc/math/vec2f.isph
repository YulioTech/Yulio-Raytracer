// ======================================================================== //
// Copyright 2009-2013 Intel Corporation                                    //
//                                                                          //
// Licensed under the Apache License, Version 2.0 (the "License");          //
// you may not use this file except in compliance with the License.         //
// You may obtain a copy of the License at                                  //
//                                                                          //
//     http://www.apache.org/licenses/LICENSE-2.0                           //
//                                                                          //
// Unless required by applicable law or agreed to in writing, software      //
// distributed under the License is distributed on an "AS IS" BASIS,        //
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. //
// See the License for the specific language governing permissions and      //
// limitations under the License.                                           //
// ======================================================================== //

#ifndef __EMBREE_ISPC_VEC2F_H__
#define __EMBREE_ISPC_VEC2F_H__

struct vec2f 
{
  float x;
  float y;
};

////////////////////////////////////////////////////////////////////////////////
/// Constructors
////////////////////////////////////////////////////////////////////////////////

inline uniform vec2f make_vec2f(const uniform float a) { uniform vec2f v; v.x = a; v.y = a; return v; }
inline varying vec2f make_vec2f(const varying float a) { varying vec2f v; v.x = a; v.y = a; return v; }

inline uniform vec2f make_vec2f(const uniform float a, const uniform float b) { uniform vec2f v; v.x = a; v.y = b; return v; }
inline varying vec2f make_vec2f(const varying float a, const varying float b) { varying vec2f v; v.x = a; v.y = b; return v; }

////////////////////////////////////////////////////////////////////////////////
/// Unary Operators
////////////////////////////////////////////////////////////////////////////////

inline uniform vec2f neg(const uniform vec2f a) { return make_vec2f(-a.x,-a.y); }
inline varying vec2f neg(const varying vec2f a) { return make_vec2f(-a.x,-a.y); }

inline uniform vec2f abs(const uniform vec2f a) { return make_vec2f(abs(a.x),abs(a.y)); }
inline varying vec2f abs(const varying vec2f a) { return make_vec2f(abs(a.x),abs(a.y)); }

inline uniform vec2f rcp(const uniform vec2f a) { return make_vec2f(rcp(a.x),rcp(a.y)); }
inline varying vec2f rcp(const varying vec2f a) { return make_vec2f(rcp(a.x),rcp(a.y)); }

////////////////////////////////////////////////////////////////////////////////
/// Binary Operators
////////////////////////////////////////////////////////////////////////////////

inline uniform vec2f add(const uniform vec2f a, const uniform vec2f b) { return make_vec2f(a.x+b.x,a.y+b.y); }
inline varying vec2f add(const varying vec2f a, const varying vec2f b) { return make_vec2f(a.x+b.x,a.y+b.y); }

inline uniform vec2f sub(const uniform vec2f a, const uniform vec2f b) { return make_vec2f(a.x-b.x,a.y-b.y); }
inline varying vec2f sub(const varying vec2f a, const varying vec2f b) { return make_vec2f(a.x-b.x,a.y-b.y); }

inline uniform vec2f mul(const uniform float a, const uniform vec2f b) { return make_vec2f(a*b.x,a*b.y); }
inline varying vec2f mul(const varying float a, const varying vec2f b) { return make_vec2f(a*b.x,a*b.y); }

inline uniform vec2f mul(const uniform vec2f a, const uniform float b) { return make_vec2f(a.x*b,a.y*b); }
inline varying vec2f mul(const varying vec2f a, const varying float b) { return make_vec2f(a.x*b,a.y*b); }

inline uniform vec2f mul(const uniform vec2f a, const uniform vec2f b) { return make_vec2f(a.x*b.x,a.y*b.y); }
inline varying vec2f mul(const varying vec2f a, const varying vec2f b) { return make_vec2f(a.x*b.x,a.y*b.y); }

inline uniform vec2f div(const uniform vec2f a, const uniform float b) { return make_vec2f(a.x/b,a.y/b); }
inline varying vec2f div(const varying vec2f a, const varying float b) { return make_vec2f(a.x/b,a.y/b); }

inline uniform vec2f div(const uniform float a, const uniform vec2f b) { return make_vec2f(a/b.x,a/b.y); }
inline varying vec2f div(const varying float a, const varying vec2f b) { return make_vec2f(a/b.x,a/b.y); }

inline uniform vec2f div(const uniform vec2f a, const uniform vec2f b) { return make_vec2f(a.x/b.x,a.y/b.y); }
inline varying vec2f div(const varying vec2f a, const varying vec2f b) { return make_vec2f(a.x/b.x,a.y/b.y); }

inline uniform vec2f min(const uniform vec2f a, const uniform vec2f b) { return make_vec2f(min(a.x,b.x),min(a.y,b.y)); }
inline varying vec2f min(const varying vec2f a, const varying vec2f b) { return make_vec2f(min(a.x,b.x),min(a.y,b.y)); }

inline uniform vec2f max(const uniform vec2f a, const uniform vec2f b) { return make_vec2f(max(a.x,b.x),max(a.y,b.y)); }
inline varying vec2f max(const varying vec2f a, const varying vec2f b) { return make_vec2f(max(a.x,b.x),max(a.y,b.y)); }

////////////////////////////////////////////////////////////////////////////////
/// Reduction Operators
////////////////////////////////////////////////////////////////////////////////

inline uniform float reduce_add(const uniform vec2f a) { return a.x+a.y; }
inline varying float reduce_add(const varying vec2f a) { return a.x+a.y; }

inline uniform float reduce_mul(const uniform vec2f a) { return a.x*a.y; }
inline varying float reduce_mul(const varying vec2f a) { return a.x*a.y; }

inline uniform float reduce_min(const uniform vec2f a) { return min(a.x,a.y); }
inline varying float reduce_min(const varying vec2f a) { return min(a.x,a.y); }

inline uniform float reduce_max(const uniform vec2f a) { return max(a.x,a.y); }
inline varying float reduce_max(const varying vec2f a) { return max(a.x,a.y); }

////////////////////////////////////////////////////////////////////////////////
/// Comparison Operators
////////////////////////////////////////////////////////////////////////////////

inline uniform bool eq(const uniform vec2f a, const uniform vec2f b) { return (a.x == b.x) & (a.y == b.y); }
inline varying bool eq(const varying vec2f a, const varying vec2f b) { return (a.x == b.x) & (a.y == b.y); }

inline uniform bool ne(const uniform vec2f a, const uniform vec2f b) { return (a.x != b.x) | (a.y != b.y); }
inline varying bool ne(const varying vec2f a, const varying vec2f b) { return (a.x != b.x) | (a.y != b.y); }

////////////////////////////////////////////////////////////////////////////////
/// Euclidian Space Operators
////////////////////////////////////////////////////////////////////////////////

inline uniform float dot(const uniform vec2f a, const uniform vec2f b) { return a.x*b.x + a.y*b.y; }
inline varying float dot(const varying vec2f a, const varying vec2f b) { return a.x*b.x + a.y*b.y; }

inline uniform float length(const uniform vec2f a) { return sqrt(dot(a,a)); }
inline varying float length(const varying vec2f a) { return sqrt(dot(a,a)); }

inline uniform vec2f normalize(const uniform vec2f a) { return mul(rsqrt(dot(a,a)),a); }
inline varying vec2f normalize(const varying vec2f a) { return mul(rsqrt(dot(a,a)),a); }

inline uniform float distance(const uniform vec2f a, const uniform vec2f b) { return length(sub(a,b)); }
inline varying float distance(const varying vec2f a, const uniform vec2f b) { return length(sub(a,b)); }

#endif
