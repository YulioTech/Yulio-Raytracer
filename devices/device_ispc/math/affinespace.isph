// ======================================================================== //
// Copyright 2009-2013 Intel Corporation                                    //
//                                                                          //
// Licensed under the Apache License, Version 2.0 (the "License");          //
// you may not use this file except in compliance with the License.         //
// You may obtain a copy of the License at                                  //
//                                                                          //
//     http://www.apache.org/licenses/LICENSE-2.0                           //
//                                                                          //
// Unless required by applicable law or agreed to in writing, software      //
// distributed under the License is distributed on an "AS IS" BASIS,        //
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. //
// See the License for the specific language governing permissions and      //
// limitations under the License.                                           //
// ======================================================================== //

#ifndef __EMBREE_ISPC_AFFINESPACE_H__
#define __EMBREE_ISPC_AFFINESPACE_H__

#include "linearspace.isph"

struct AffineSpace3f
{
  LinearSpace3f l;
  vec3f p;
};

////////////////////////////////////////////////////////////////////////////////
/// Constructors
////////////////////////////////////////////////////////////////////////////////

inline uniform AffineSpace3f make_AffineSpace3f(const uniform LinearSpace3f l, const uniform vec3f p) {
  uniform AffineSpace3f xfm; xfm.l = l; xfm.p = p; return xfm;
}
inline varying AffineSpace3f make_AffineSpace3f(const varying LinearSpace3f l, const varying vec3f p) {
  varying AffineSpace3f xfm; xfm.l = l; xfm.p = p; return xfm;
}

inline uniform AffineSpace3f make_AffineSpace3f(const uniform vec3f x, const uniform vec3f y, const uniform vec3f z, const uniform vec3f p) {
  uniform AffineSpace3f xfm; xfm.l.vx = x; xfm.l.vy = y; xfm.l.vz = z; xfm.p = p; return xfm;
}
inline varying AffineSpace3f make_AffineSpace3f(const varying vec3f x, const varying vec3f y, const varying vec3f z, const varying vec3f p) {
  varying AffineSpace3f xfm; xfm.l.vx = x; xfm.l.vy = y; xfm.l.vz = z; xfm.p = p; return xfm;
}

////////////////////////////////////////////////////////////////////////////////
// Unary Operators
////////////////////////////////////////////////////////////////////////////////

inline uniform AffineSpace3f neg(const uniform AffineSpace3f a) { return make_AffineSpace3f(neg(a.l),neg(a.p)); }
inline varying AffineSpace3f neg(const varying AffineSpace3f a) { return make_AffineSpace3f(neg(a.l),neg(a.p)); }

inline uniform AffineSpace3f rcp( const uniform AffineSpace3f a) { uniform LinearSpace3f il = rcp(a.l); return make_AffineSpace3f(il,neg(mul(il,a.p))); }
inline varying AffineSpace3f rcp( const varying AffineSpace3f a) { varying LinearSpace3f il = rcp(a.l); return make_AffineSpace3f(il,neg(mul(il,a.p))); }

////////////////////////////////////////////////////////////////////////////////
/// Binary Operators
////////////////////////////////////////////////////////////////////////////////

inline uniform AffineSpace3f add(const uniform AffineSpace3f a, const uniform AffineSpace3f b) { return make_AffineSpace3f(add(a.l,b.l), add(a.p,b.p)); }
inline varying AffineSpace3f add(const varying AffineSpace3f a, const varying AffineSpace3f b) { return make_AffineSpace3f(add(a.l,b.l), add(a.p,b.p)); }

inline uniform AffineSpace3f sub(const uniform AffineSpace3f a, const uniform AffineSpace3f b) { return make_AffineSpace3f(sub(a.l,b.l), sub(a.p,b.p)); }
inline varying AffineSpace3f sub(const varying AffineSpace3f a, const varying AffineSpace3f b) { return make_AffineSpace3f(sub(a.l,b.l), sub(a.p,b.p)); }

inline uniform AffineSpace3f mul( const uniform float         a, const uniform AffineSpace3f b ) { return make_AffineSpace3f(mul(a,b.l),mul(a,b.p)); }
inline uniform AffineSpace3f mul( const uniform AffineSpace3f a, const uniform float         b ) { return make_AffineSpace3f(mul(a.l,b),mul(a.p,b)); }
inline uniform AffineSpace3f mul( const uniform AffineSpace3f a, const uniform AffineSpace3f b ) { return make_AffineSpace3f(mul(a.l,b.l),add(mul(a.l,b.p),a.p)); }

inline varying AffineSpace3f mul( const varying float         a, const varying AffineSpace3f b ) { return make_AffineSpace3f(mul(a,b.l),mul(a,b.p)); }
inline varying AffineSpace3f mul( const varying AffineSpace3f a, const varying float         b ) { return make_AffineSpace3f(mul(a.l,b),mul(a.p,b)); }
inline varying AffineSpace3f mul( const varying AffineSpace3f a, const varying AffineSpace3f b ) { return make_AffineSpace3f(mul(a.l,b.l),add(mul(a.l,b.p),a.p)); }

inline uniform vec3f xfmPoint (const uniform AffineSpace3f a, const uniform vec3f v) { return add(xfmVector(a.l,v),a.p); }
inline varying vec3f xfmPoint (const uniform AffineSpace3f a, const varying vec3f v) { return add(xfmVector(a.l,v),a.p); }
inline varying vec3f xfmPoint (const varying AffineSpace3f a, const varying vec3f v) { return add(xfmVector(a.l,v),a.p); }

inline uniform vec3f xfmVector(const uniform AffineSpace3f a, const uniform vec3f v) { return xfmVector(a.l,v); }
inline varying vec3f xfmVector(const uniform AffineSpace3f a, const varying vec3f v) { return xfmVector(a.l,v); }
inline varying vec3f xfmVector(const varying AffineSpace3f a, const varying vec3f v) { return xfmVector(a.l,v); }

////////////////////////////////////////////////////////////////////////////////
/// Comparison Operators
////////////////////////////////////////////////////////////////////////////////

inline uniform bool eq(const uniform AffineSpace3f a, const uniform AffineSpace3f b) { return eq(a.l,b.l) & eq(a.p,b.p); }
inline varying bool eq(const varying AffineSpace3f a, const varying AffineSpace3f b) { return eq(a.l,b.l) & eq(a.p,b.p); }

inline uniform bool ne(const uniform AffineSpace3f a, const uniform AffineSpace3f b) { return ne(a.l,b.l) | ne(a.p,b.p); }
inline varying bool ne(const varying AffineSpace3f a, const varying AffineSpace3f b) { return ne(a.l,b.l) | ne(a.p,b.p); }

inline uniform bool similar(const uniform AffineSpace3f a, const uniform AffineSpace3f b) { 
  if (max(max(abs(a.   p.x-b.   p.x),abs(a.   p.y-b.   p.y)),abs(a.   p.z-b.   p.z)) > 0.001f) return false;
  if (max(max(abs(a.l.vx.x-b.l.vx.x),abs(a.l.vx.y-b.l.vx.y)),abs(a.l.vx.z-b.l.vx.z)) > 0.001f) return false;
  if (max(max(abs(a.l.vy.x-b.l.vy.x),abs(a.l.vy.y-b.l.vy.y)),abs(a.l.vy.z-b.l.vy.z)) > 0.001f) return false;
  if (max(max(abs(a.l.vz.x-b.l.vz.x),abs(a.l.vz.y-b.l.vz.y)),abs(a.l.vz.z-b.l.vz.z)) > 0.001f) return false;
  return true;
}

#endif
