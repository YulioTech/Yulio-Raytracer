// ======================================================================== //
// Copyright 2009-2013 Intel Corporation                                    //
//                                                                          //
// Licensed under the Apache License, Version 2.0 (the "License");          //
// you may not use this file except in compliance with the License.         //
// You may obtain a copy of the License at                                  //
//                                                                          //
//     http://www.apache.org/licenses/LICENSE-2.0                           //
//                                                                          //
// Unless required by applicable law or agreed to in writing, software      //
// distributed under the License is distributed on an "AS IS" BASIS,        //
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. //
// See the License for the specific language governing permissions and      //
// limitations under the License.                                           //
// ======================================================================== //

#pragma once

#include "default.isph"

struct Image;

typedef uniform vec3f (*Image__get_nearest_uniform)(const uniform Image *uniform this, 
                                                    const uniform int x, const uniform int y);

typedef varying vec3f (*Image__get_nearest_varying)(const uniform Image *uniform this, 
                                                    const varying int x, const varying int y);

typedef varying vec3f (*Image__get_bilinear_varying)(const uniform Image *uniform this, 
                                                     const varying float x, const varying float y);

struct Image 
{
  RefCount base;
  vec2ui  size;
  Image__get_nearest_uniform get_nearest_uniform;
  Image__get_nearest_varying get_nearest_varying;
  Image__get_bilinear_varying get_bilinear_varying;
};

inline void Image__Destructor(uniform RefCount *uniform _this) {
  LOG(print("Image__Destructor\n"));
  RefCount__Destructor(_this);
}

inline void Image__Constructor(uniform Image *uniform this, 
                               uniform DestructorFunc destructor,
                               const uniform vec2ui size, 
                               uniform Image__get_nearest_uniform get_nearest_uniform, 
                               uniform Image__get_nearest_varying get_nearest_varying,
                               uniform Image__get_bilinear_varying get_bilinear_varying)
{
  LOG(print("Image__Constuctor % %\n",size.x,size.y));
  RefCount__Constructor(&this->base,destructor);
  this->size = size;
  this->get_nearest_uniform = get_nearest_uniform;
  this->get_nearest_varying = get_nearest_varying;
  this->get_bilinear_varying = get_bilinear_varying;
}
