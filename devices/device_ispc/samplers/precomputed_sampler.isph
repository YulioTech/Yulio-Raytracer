// ======================================================================== //
// Copyright 2009-2013 Intel Corporation                                    //
//                                                                          //
// Licensed under the Apache License, Version 2.0 (the "License");          //
// you may not use this file except in compliance with the License.         //
// You may obtain a copy of the License at                                  //
//                                                                          //
//     http://www.apache.org/licenses/LICENSE-2.0                           //
//                                                                          //
// Unless required by applicable law or agreed to in writing, software      //
// distributed under the License is distributed on an "AS IS" BASIS,        //
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. //
// See the License for the specific language governing permissions and      //
// limitations under the License.                                           //
// ======================================================================== //

#pragma once

#include "../default.isph"
#include "../lights/light.isph"
#include "patterns.isph"

#define MAX_SAMPLES_1D 21
#define MAX_SAMPLES_2D 21
#define MAX_SAMPLES_LIGHT 5

/*! A complete high-dimensional sample, attached to one sample in the image plane. */
struct PrecomputedSample 
{
  varying vec2f pixel;               //!< Sample location inside the pixel. [0.5;0.5] is the pixel center.
  varying float time;                //!< time sample for motion blur.
  varying vec2f lens;                //!< 2D lens sample for depth of field.
  varying float samples1D[MAX_SAMPLES_1D];        //!< Additional 1D samples requested by the integrator.
  varying vec2f samples2D[MAX_SAMPLES_2D];        //!< Additional 2D samples requested by the integrator.
  varying LightSample lightSamples[MAX_SAMPLES_LIGHT]; //!< Precomputed light samples.
};

/*! Pixel sample position. */
inline const varying vec2f PrecomputedSample__getPixel(const uniform PrecomputedSample* uniform this) { 
  return this->pixel; 
}

/*! Get the current lens sample. */
inline const varying vec2f PrecomputedSample__getLens(const uniform PrecomputedSample* uniform this) { 
  return this->lens; 
}

/*! Get the current time sample. */
inline const varying float PrecomputedSample__getTime(const uniform PrecomputedSample* uniform this) { 
  return this->time; 
}

/*! Get the specified additional 1D sample for the current sample. */
inline const varying float PrecomputedSample__getFloat (const uniform PrecomputedSample* uniform this, uniform int dim) { 
  return this->samples1D[dim]; 
}

/*! Get the specified additional 2D sample for the current sample. */
inline const varying vec2f PrecomputedSample__getVec2f(const uniform PrecomputedSample* uniform this, uniform int dim) { 
  return this->samples2D[dim]; 
}

/*! Get the specified precomputed light sample for the current sample. */
inline const varying LightSample PrecomputedSample__getLightSample(const uniform PrecomputedSample* uniform this, uniform int lightSampleId) {
  return this->lightSamples[lightSampleId]; 
}

/*! The sampler factory precomputes samples for usage by multiple samlper threads. */
struct PrecomputedSampler 
{
  uint numSamples1D;                  //!< Number of additional 1D samples per pixel sample.
  uint numSamples2D;                  //!< Number of additional 2D samples per pixel sample.
  uint numLightSamples;               //!< Number of precomputed light samples per pixel sample.
  uniform Light* lights[MAX_SAMPLES_LIGHT];        //!< References to all light sources.
  uniform int lightBaseSamples[MAX_SAMPLES_LIGHT]; //!< Base samples for light sample precomputation.
  
  uint samplesPerPixel;               //!< Number of samples per pixel.
  uint sampleSets;                    //!< Number of precomputed sample sets.
  uint totalSamplesMask;              //!< sampleSets*samplesPerPixel-1
  uniform PrecomputedSample* uniform samples; //!< All precomputed samples.
  uniform PrecomputedSample* uniform _samples; //!< All precomputed samples.
};

inline void PrecomputedSampler__Destructor(uniform PrecomputedSampler* uniform this) {
  LOG(print("PrecomputedSampler__Destructor\n"));
  delete[] this->_samples;
}

/*! Construction from parameters. */
inline void PrecomputedSampler__Constructor(uniform PrecomputedSampler* uniform this,
                                            const uniform int samplesPerPixel,
                                            const uniform int sampleSets)
{
  LOG(print("PrecomputedSampler__Constructor\n"));
  this->numSamples1D = 0;
  this->numSamples2D = 0;
  this->numLightSamples = 0;
  this->samplesPerPixel = samplesPerPixel;
  this->sampleSets = sampleSets;
  this->totalSamplesMask = samplesPerPixel*sampleSets-1;
  this->_samples = NULL;
  this->samples = NULL;
}
    
/*! Request additional 1D samples per pixel sample. */
inline uniform int PrecomputedSampler__request1D(uniform PrecomputedSampler* uniform this, uniform int num) 
{
  uniform int dim = this->numSamples1D;
  this->numSamples1D += num;
  if (this->numSamples1D > MAX_SAMPLES_1D) print("ERROR: Too many 1D samples requested.\n");
  return dim;
}

/*! Request additional 2D samples per pixel sample. */
inline uniform int PrecomputedSampler__request2D(uniform PrecomputedSampler* uniform this, uniform int num) 
{
  uniform int dim = this->numSamples2D;
  this->numSamples2D += num;
  if (this->numSamples2D > MAX_SAMPLES_2D) print("ERROR: Too many 2D samples requested.\n");
  return dim;
}

/*! Request a precomputed light sample. */
inline uniform int PrecomputedSampler__requestLightSample(uniform PrecomputedSampler* uniform this, uniform int baseSample, uniform Light* uniform light)
{
  this->lights[this->numLightSamples] = light;
  this->lightBaseSamples[this->numLightSamples] = baseSample;
  this->numLightSamples++;
  if (this->numLightSamples > MAX_SAMPLES_LIGHT) print("ERROR: Too many light samples requested.\n");
  return this->numLightSamples-1;
}

inline uniform PrecomputedSample* uniform PrecomputedSampler__get(const uniform PrecomputedSampler* uniform this, uniform uint i, uniform uint s) {
  return &this->samples[(i*this->samplesPerPixel+s)&this->totalSamplesMask];
}

/*! Initialize the factory for a given iteration and precompute all samples. */
void PrecomputedSampler__init(uniform PrecomputedSampler* uniform this)
{
  print("Generating % MB of precalculated samples  ",
        (this->sampleSets*this->samplesPerPixel*sizeof(uniform PrecomputedSample))/(1024*1024));
  
  //varying Random rng; rng.Constructor(1243);
  varying Random rng; Random__Constructor(&rng, 1243 + 5464*programIndex);
  this->_samples = uniform new uniform PrecomputedSample[this->sampleSets*this->samplesPerPixel+1];
  this->samples = (uniform PrecomputedSample* uniform) align_ptr(this->_samples);

  varying vec2f* uniform _pixel = uniform new varying vec2f[this->samplesPerPixel+1];
  varying float* uniform _time = uniform new varying float[this->samplesPerPixel+1];
  varying vec2f* uniform _lens = uniform new varying vec2f[this->samplesPerPixel+1];
  varying float* uniform _samples1D = uniform new varying float[this->samplesPerPixel+1];
  varying vec2f* uniform _samples2D = uniform new varying vec2f[this->samplesPerPixel+1];

  varying vec2f* uniform pixel = (varying vec2f* uniform) align_ptr(_pixel); 
  varying float* uniform time = (varying float* uniform) align_ptr(_time);
  varying vec2f* uniform lens = (varying vec2f* uniform) align_ptr(_lens);
  varying float* uniform samples1D = (varying float* uniform) align_ptr(_samples1D);
  varying vec2f* uniform samples2D = (varying vec2f* uniform) align_ptr(_samples2D);

  for (uniform int set = 0; set < this->sampleSets; set++)
  {
    print(".");
    
    /*! Generate pixel and lens samples. */
    multiJittered(pixel, this->samplesPerPixel, rng);
    jittered(time, this->samplesPerPixel, rng);
    multiJittered(lens, this->samplesPerPixel, rng);
    
    for (uniform int s = 0; s < this->samplesPerPixel; s++) 
    {
      this->samples[set*this->samplesPerPixel+s].pixel = pixel[s];
      this->samples[set*this->samplesPerPixel+s].time  = time[s];
      this->samples[set*this->samplesPerPixel+s].lens  = lens[s];
    }

    /*! Generate requested 1D samples. */
    for (uniform int d = 0; d < this->numSamples1D; d++) {
      jittered(samples1D, this->samplesPerPixel, rng);
      for (uniform int s = 0; s < this->samplesPerPixel; s++) {
        this->samples[set*this->samplesPerPixel+s].samples1D[d] = samples1D[s];
      }
    }

    /*! Generate 2D samples. */
    for (uniform int d = 0; d < this->numSamples2D; d++) {
      multiJittered(samples2D, this->samplesPerPixel, rng);
      for (uniform int s = 0; s < this->samplesPerPixel; s++) {
        this->samples[set*this->samplesPerPixel+s].samples2D[d] = samples2D[s];
      }
    }

    /*! Generate light samples. */
    for (uniform int d = 0; d < this->numLightSamples; d++) {
      for (uniform int s = 0; s < this->samplesPerPixel; s++) {
        varying LightSample ls;
        varying DifferentialGeometry dg; 
        varying vec2f sample = this->samples[set*this->samplesPerPixel+s].samples2D[this->lightBaseSamples[d]];
        ls.L = this->lights[d]->sample(this->lights[d], dg, ls.wi, ls.tMax, sample);
        this->samples[set*this->samplesPerPixel+s].lightSamples[d] = ls;
      }
    }
  }
  delete[] _pixel;
  delete[] _time;
  delete[] _lens;
  delete[] _samples1D;
  delete[] _samples2D;
  print(" [DONE]\n");
}

/*! Reset the sampler factory. Delete all precomputed samples. */
inline void PrecomputedSampler__reset(uniform PrecomputedSampler* uniform this)
{
  delete[] this->_samples;
  this->_samples = NULL;
  this->samples = NULL;
  this->numSamples1D = 0;
  this->numSamples2D = 0;
  this->numLightSamples = 0;
}

inline bool PrecomputedSampler__empty (uniform PrecomputedSampler* uniform this) {
  return this->samples == NULL;
}
