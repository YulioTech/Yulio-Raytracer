// ======================================================================== //
// Copyright 2009-2013 Intel Corporation                                    //
//                                                                          //
// Licensed under the Apache License, Version 2.0 (the "License");          //
// you may not use this file except in compliance with the License.         //
// You may obtain a copy of the License at                                  //
//                                                                          //
//     http://www.apache.org/licenses/LICENSE-2.0                           //
//                                                                          //
// Unless required by applicable law or agreed to in writing, software      //
// distributed under the License is distributed on an "AS IS" BASIS,        //
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. //
// See the License for the specific language governing permissions and      //
// limitations under the License.                                           //
// ======================================================================== //

#pragma once

#include "default.isph"

#define TABLE_SIZE 32      
#define WARMUP_ITERATIONS 7

struct Random
{
  int seed;
  int state;
  int table[TABLE_SIZE];
};

///////////////////////////////////////////////////////////////////////////////
// uniform Random

inline void Random__setSeed(uniform Random* uniform this, const uniform int s)
{
  const uniform int a = 16807; 
  const uniform int m = 2147483647;
  const uniform int q = 127773;
  const uniform int r = 2836;
  
  if (s == 0) this->seed = 1;
  else this->seed = s & 0x7FFFFFFF;
  
  for (uniform int j = TABLE_SIZE+WARMUP_ITERATIONS; j >= 0; j--) 
  {
    uniform int k = this->seed / q;
    this->seed = a*(this->seed - k*q) - r*k;
    this->seed = this->seed & 0x7FFFFFFF;
    if (j < TABLE_SIZE) this->table[j] = this->seed;
  }
  this->state = this->table[0];
}

inline void Random__Constructor(uniform Random* uniform this, const uniform int seed/* = 27*/) 
{
  Random__setSeed(this,seed);
}

inline uniform int Random__getInt(uniform Random* uniform this)
{
  const uniform int a = 16807;
  const uniform int m = 2147483647;
  const uniform int q = 127773;
  const uniform int r = 2836;
  const uniform int f = 1 + 2147483647 / TABLE_SIZE;
  
  uniform int k = this->seed / q;
  this->seed = a*(this->seed - k*q) - r*k;
  this->seed = this->seed & 0x7FFFFFFF;
  uniform int j = min(this->state / f, TABLE_SIZE-1);
  this->state = this->table[j];
  this->table[j] = this->seed;
  return this->state;
}

inline uniform int Random__getInt (uniform Random* uniform this, uniform int limit) { 
  return Random__getInt(this) % limit; 
}

inline uniform float Random__getFloat (uniform Random* uniform this) { 
  return min(Random__getInt(this) / 2147483647.0f, 1.0f);
} 

///////////////////////////////////////////////////////////////////////////////
// varying Random

inline void Random__setSeed(varying Random* uniform this, const varying int s)
{
  const varying int a = 16807;
  const varying int m = 2147483647;
  const varying int q = 127773;
  const varying int r = 2836;
  
  if (s == 0) this->seed = 1;
  else this->seed = s & 0x7FFFFFFF;
  
  for (uniform int j = TABLE_SIZE+WARMUP_ITERATIONS; j >= 0; j--) 
  {
    varying int k = this->seed / q;
    this->seed = a*(this->seed - k*q) - r*k;
    this->seed = this->seed & 0x7FFFFFFF;
    if (j < TABLE_SIZE) this->table[j] = this->seed;
  }
  this->state = this->table[0];
}

inline void Random__Constructor(varying Random* uniform this, const int seed/* = 27*/) 
{
  Random__setSeed(this,seed);
}

inline varying int Random__getInt(varying Random* uniform this)
{
  const varying int a = 16807;
  const varying int m = 2147483647;
  const varying int q = 127773;
  const varying int r = 2836;
  const varying int f = 1 + 2147483647 / TABLE_SIZE;
  
  varying int k = this->seed / q;
  this->seed = a*(this->seed - k*q) - r*k;
  this->seed = this->seed & 0x7FFFFFFF;
  varying int j = min(this->state / f, TABLE_SIZE-1);
  this->state = this->table[j];
  this->table[j] = this->seed;
  return this->state;
}

inline varying int Random__getInt (varying Random* uniform this, varying int limit) { 
  return Random__getInt(this) % limit; 
}

inline varying float Random__getFloat (varying Random* uniform this) { 
  return min(Random__getInt(this) / 2147483647.0f, 1.0f);
} 
