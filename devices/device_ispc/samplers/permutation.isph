// ======================================================================== //
// Copyright 2009-2013 Intel Corporation                                    //
//                                                                          //
// Licensed under the Apache License, Version 2.0 (the "License");          //
// you may not use this file except in compliance with the License.         //
// You may obtain a copy of the License at                                  //
//                                                                          //
//     http://www.apache.org/licenses/LICENSE-2.0                           //
//                                                                          //
// Unless required by applicable law or agreed to in writing, software      //
// distributed under the License is distributed on an "AS IS" BASIS,        //
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. //
// See the License for the specific language governing permissions and      //
// limitations under the License.                                           //
// ======================================================================== //

#pragma once

#include "../default.isph"
#include "random.isph"

/*! Random permutation. */
struct UniformPermutation
{
  uniform int elts;            //!< Size of the permutation.
  uniform int* uniform perm;   //!< Array storing the permutation.
};

/*! Creates a random permutation. Random number generator is provided as argument. */
inline void UniformPermutation__Constructor (uniform UniformPermutation* uniform this, uniform int elts, uniform Random& rng)
{
  this->elts = elts;
  this->perm = uniform new uniform int[elts];
  for (uniform int i=0; i<elts; i++) this->perm[i] = i;
  for (uniform int i=0; i<elts; i++) {
    uniform int j = Random__getInt(&rng,elts);
    uniform int h = this->perm[i]; this->perm[i] = this->perm[j]; this->perm[j] = h;
  }
}

/*! Destructs the permutation. */
inline void UniformPermutation__Destructor (uniform UniformPermutation* uniform this) 
{
  this->elts = 0;
  delete[] this->perm; this->perm = NULL; 
}

/*! Returns the size of the permutation. */
inline uniform int UniformPermutation__size(const uniform UniformPermutation* uniform this) {
  return this->elts;
}
  
/*! Returns the i'th element of the permutation. */
inline uniform int UniformPermutation__get(const uniform UniformPermutation* uniform this, uniform int i) {
  //assert(i >= 0 && i < elts);
  return this->perm[i];
}

/*! Random permutation. */
struct VaryingPermutation
{
  uniform int elts;            //!< Size of the permutation.
  varying int* uniform _perm;   //!< Array storing the permutation.
  varying int* uniform perm;   //!< Array storing the permutation.
};

/*! Creates a random permutation. Random number generator is provided as argument. */
inline void VaryingPermutation__Constructor (uniform VaryingPermutation* uniform this, uniform int elts, varying Random& rng)
{
  this->elts = elts;
  this->_perm = uniform new varying int[elts+1];
  this->perm = (varying int* uniform) align_ptr(this->_perm);
  for (uniform int i=0; i<elts; i++) this->perm[i] = i;
  for (uniform int i=0; i<elts; i++) {
    varying int j = Random__getInt(&rng,elts);
    varying int h = this->perm[i]; this->perm[i] = this->perm[j]; this->perm[j] = h;
  }
}

/*! Destructs the permutation. */
inline void VaryingPermutation__Destructor (uniform VaryingPermutation* uniform this) 
{
  this->elts = 0;
  delete[] this->_perm; this->_perm = NULL; this->perm = NULL; 
}

/*! Returns the size of the permutation. */
inline uniform int VaryingPermutation__size(const uniform VaryingPermutation* uniform this) {
  return this->elts;
}

/*! Returns the i'th element of the permutation. */
inline varying int VaryingPermutation__get(const uniform VaryingPermutation* uniform this, varying int i) {
  //assert(i >= 0 && i < elts);
  return this->perm[i];
}
