// ======================================================================== //
// Copyright 2009-2013 Intel Corporation                                    //
//                                                                          //
// Licensed under the Apache License, Version 2.0 (the "License");          //
// you may not use this file except in compliance with the License.         //
// You may obtain a copy of the License at                                  //
//                                                                          //
//     http://www.apache.org/licenses/LICENSE-2.0                           //
//                                                                          //
// Unless required by applicable law or agreed to in writing, software      //
// distributed under the License is distributed on an "AS IS" BASIS,        //
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. //
// See the License for the specific language governing permissions and      //
// limitations under the License.                                           //
// ======================================================================== //

#pragma once

#include "cameras/camera.isph"
#include "scene/scene.isph"
#include "tonemappers/tonemapper.isph"
#include "framebuffers/swapchain.isph"

struct Renderer;

typedef void (*RenderFrameInitFunc)(uniform Renderer* uniform _this,
                                    const uniform Scene* uniform scene);

typedef uniform int (*RenderFrameFunc)(uniform Renderer* uniform _this,
                                       const uniform Camera* uniform camera,
                                       const uniform Scene* uniform scene,
                                       const uniform ToneMapper* uniform toneMapper,
                                       uniform SwapChain *uniform swapchain,
                                       const uniform int accuMode);

struct Renderer 
{
  RefCount base;

  /*! Initializes rendering of an entire frame */
  RenderFrameInitFunc renderFrameInit;

  /*! Renders an entire frame */
  RenderFrameFunc renderFrame;
};

inline void Renderer__Destructor(uniform RefCount* uniform this) {
  LOG(print("Renderer__Destructor\n"));
  RefCount__Destructor(this);
}

inline void Renderer__Constructor(uniform Renderer* uniform this, 
                                  uniform DestructorFunc destructor,
                                  uniform RenderFrameInitFunc renderFrameInit,
                                  uniform RenderFrameFunc renderFrame)
{
  LOG(print("Renderer__Constructor\n"));
  RefCount__Constructor(&this->base,destructor);
  this->renderFrameInit = renderFrameInit;
  this->renderFrame     = renderFrame;
}
